name: tests

trigger: ["*"]
pr: ["*"]

pool:
  vmImage: "ubuntu-18.04"

resources:
  containers:
    - container: redis
      image: redis
      ports:
        - 6379:6379
    - container: elasticsearch
      image: cccs/elasticsearch:7.8.0
      env:
        ES_JAVA_OPTS: "-Xms256m -Xmx512m"
        DISCOVERY_TYPE: "single-node"
      ports:
        - 9200:9200
    - container: minio
      image: cccs/minio
      env:
        MINIO_ACCESS_KEY: al_storage_key
        MINIO_SECRET_KEY: Ch@ngeTh!sPa33w0rd
      ports:
        - 9000:9000

  repositories:
    - repository: assemblyline-base
      type: github
      endpoint: github
      name: CybercentreCanada/assemblyline-base

jobs:
  - job: run_test
    strategy:
      matrix:
        python3_9:
          python.version: "3.9"
        # Python3_10:
        #   python.version: '3.10'

    timeoutInMinutes: 15
    services:
      elasticsearch: elasticsearch
      redis: redis
      minio: minio

    steps:
      - task: UsePythonVersion@0
        displayName: Set python version
        inputs:
          versionSpec: "$(python.version)"
      - checkout: self
        displayName: Checkout assemblyline-service-server
      - checkout: assemblyline-base
        displayName: Checkout assemblyline-base
      - script: |
          sudo mkdir -p /etc/assemblyline/
          sudo mkdir -p /var/cache/assemblyline/
          sudo mkdir -p /var/lib/assemblyline/
          sudo cp pipelines/config.yml /etc/assemblyline
          sudo chmod a+rw /var/cache/assemblyline/
          sudo chmod a+rw /var/lib/assemblyline/
          sudo apt-get update
          sudo apt-get install -y build-essential libffi-dev libfuzzy-dev python3-dev
        displayName: Setup Environment
        workingDirectory: $(Pipeline.Workspace)/s/assemblyline-service-server
      - script: |
          # Try to checkout the matching branch, if the command fails, don't care.
          export BRANCH_NAME=$(basename -- "$SYSTEM_PULLREQUEST_SOURCEBRANCH")
          export BRANCH_NAME=${BRANCH_NAME:-"$BUILD_SOURCEBRANCHNAME"}
          git checkout -b $BRANCH_NAME -t origin/$BRANCH_NAME || true
          sudo env "PATH=$PATH" python -m pip install --no-cache-dir -e .
        displayName: Install assemblyline
        workingDirectory: $(Pipeline.Workspace)/s/assemblyline-base
      - script: |
          sudo env "PATH=$PATH" python -m pip install --no-cache-dir -r test/requirements.txt
          sudo env "PATH=$PATH" python -m pip install --no-cache-dir -e .
        displayName: Install assemblyline-service-server
        workingDirectory: $(Pipeline.Workspace)/s/assemblyline-service-server
      - script: |
          python -m assemblyline_service_server.app &
          pytest -rsx -vv
        workingDirectory: $(Pipeline.Workspace)/s/assemblyline-service-server
        displayName: Test
